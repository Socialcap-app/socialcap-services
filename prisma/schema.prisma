// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

generator zod {
  provider                         = "zod-prisma-types"
  useMultipleFiles                 = false // default is false
  writeBarrelFiles                 = true // default is true  
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is false
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = true // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = true // default is false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Merkle Maps 
//
model MerkleMap {
  id         Int      @id @default(autoincrement())
  name       String
  root       BigInt
  size       Int
  height     Int
  createdUtc DateTime @default(now()) @map("created_utc")
  updatedUtc DateTime @updatedAt @map("updated_utc")

  leafs MerkleMapLeaf[] @relation(name: "map_leafs")

  @@map("merkle_map")
}

model MerkleMapLeaf {
  uid        String   @id @default(uuid())
  mapId      Int      @map("merkle_map_id")
  index      BigInt // a Bigint
  key        String // a Bigint
  hash       String // a Bigint
  data       String? // JSON stringified, optional because we can use just the Hash
  createdUtc DateTime @default(now()) @map("created_utc")
  updatedUtc DateTime @updatedAt @map("updated_utc")

  // Many to one relation: MarkleMapLeaf belongs to MerkleMap
  map MerkleMap @relation(name: "map_leafs", fields: [mapId], references: [id])

  @@map("merkle_map_leaf")
}

//
// VERY Simple KeyValue store
// we only store string keys and JSON.stringified string values
// all serialization and deserialization must be done by the appl
//
model KVStore {
  key   String @unique /// @zod.string.max(132)
  value String

  @@map("key_values")
}

//
// Entities
// 
model Session {
  uid        String   @id @unique @default(uuid()) /// @zod.string.max(36)
  otp        String /// @zod.string.min(6).max(8)
  email      String /// @zod.string.email().min(5).max(128)
  createdUtc DateTime @default(now()) @map("created_utc")
  updatedUtc DateTime @default(now()) @map("updated_utc")

  @@map("sessions")
}

model Person {
  uid         String    @id @unique /// @zod.string.max(32)
  accountId   String?   @map("account_id") /// @zod.string.max(64)
  state       String /// @zod.string.min(1).max(12)
  fullName    String    @map("full_name") /// @zod.string.min(3).max(128)
  description String?   @default("") /// @zod.string.max(128)
  image       String?   @default("") /// @zod.string.max(128) 
  email       String    @unique /// @zod.string.email().min(5).max(128)
  phone       String?   @default("") /// @zod.string.max(128)
  telegram    String?   @default("") /// @zod.string.max(128)
  preferences String?   @default("{}")
  createdUTC  DateTime  @default(now()) @map("created_utc")
  updatedUTC  DateTime? @default(now()) @map("updated_utc")
  approvedUTC DateTime? @map("approved_utc")

  // roles in Communities related to this Person
  // Members Members[]

  @@map("persons")
}

model Community {
  uid         String    @id @unique /// @zod.string.max(32)
  accountId   String?   @map("account_id") /// @zod.string.max(64)
  adminUid    String    @map("admin_uid") /// @zod.string.max(64)
  state       String /// @zod.string.min(1).max(12) 
  name        String /// @zod.string.min(3).max(128)
  description String? /// @zod.string.max(128)
  image       String? /// @zod.string.url().max(1024)
  createdUTC  DateTime  @default(now()) @map("created_utc")
  updatedUTC  DateTime  @default(now()) @map("updated_utc")
  approvedUTC DateTime? @map("approved_utc")
  xadmins     String?   @default("") // coma separated list of extra admins Uids

  @@map("communities")
}

model Members {
  uid          String    @id @unique // is [communityUid:personUid]
  // members of this community
  communityUid String    @default("") @map("community_uid") /// @zod.string.max(32)
  personUid    String    @default("") @map("person_uid") /// @zod.string.max(32)
  role         String    @default("0") /// @zod.string.max(32) // 1:PLAIN, 2:VALIDATOR, 3:AUDITOR
  createdUTC   DateTime  @default(now()) @map("created_utc")
  approvedUTC  DateTime? @map("approved_utc")

  @@map("members")
}

model Claim {
  uid               String    @id @unique
  communityUid      String    @map("community_uid")
  applicantUid      String    @map("applicant_uid")
  planUid           String    @map("plan_uid")
  state             Int
  accountId         String?   @map("account_id")
  alias             String?
  createdUTC        DateTime  @default(now()) @map("created_utc")
  updatedUTC        DateTime  @default(now()) @map("updated_utc")
  votedUTC          DateTime? @map("voted_utc")
  issuedUTC         DateTime? @map("issued_utc")
  dueUTC            DateTime? @map("due_utc")
  requiredVotes     Int?      @default(0) @map("required_votes")
  requiredPositives Int?      @default(0) @map("required_positives")
  positiveVotes     Int?      @default(0) @map("positive_votes")
  negativeVotes     Int?      @default(0) @map("negative_votes")
  ignoredVotes      Int?      @default(0) @map("ignored_votes")
  evidenceData      String?   @default("") @map("evidence_data")

  @@map("claims")
}

model Plan {
  uid             String    @id @unique
  communityUid    String    @map("community_uid")
  state           Int
  name            String    @default("")
  alias           String?
  description     String?   @default("")
  image           String?   @default("")
  template        String?   @default("")
  evidence        String?   @default("[]")
  strategy        String?   @default("{}")
  createdUTC      DateTime  @default(now()) @map("created_utc")
  updatedUTC      DateTime  @default(now()) @map("updated_utc")
  approvedUTC     DateTime? @map("approved_utc")
  fee             Int?      @default(0)
  payedBy         Int?      @default(1) @map("payed_by") // 1: Applicant 2: Community 3: Socialcap
  rewardsShare    Int?      @default(0) @map("rewards_share")
  communityShare  Int?      @default(0) @map("community_share")
  protocolShare   Int?      @default(0) @map("protocol_share")
  total           Int?      @default(1)
  available       Int?      @default(1)
  expiration      Int?      @default(0)
  revocable       Boolean?  @default(false)
  // claiming start and end dates 
  startsUTC       DateTime? @map("starts_utc")
  endsUTC         DateTime? @map("ends_utc")
  // voting start and end dates 
  votingStartsUTC DateTime? @map("voting_starts_utc")
  votingEndsUTC   DateTime? @map("voting_ends_utc")

  @@map("plans")
}

model Credential {
  uid          String    @id @unique
  // the MINA account where this credential "lives"
  accountId    String    @map("credential_id")
  // this are the other related MINA account ids
  applicantId  String    @map("applicant_id")
  claimId      String    @map("claim_id")
  // the source references (redundant by useful for querying)
  applicantUid String    @map("applicant_uid")
  communityUid String    @map("community_uid")
  claimUid     String    @map("claim_uid")
  // type & description data
  type         String?   @default("")
  description  String?   @default("")
  community    String?   @default("")
  image        String?   @default("")
  alias        String?   @default("")
  stars        Int?      @default(0)
  // additional options
  metadata     String?   @default("{}")
  revocable    Boolean?  @default(false)
  // timestamps
  issuedUTC    DateTime? @map("issued_utc")
  expiresUTC   DateTime? @map("expires _utc")

  @@map("credentials")
}

model Task {
  uid          String    @id @unique
  planUid      String    @default("") @map("plan_uid")
  claimUid     String    @map("claim_uid")
  assigneeUid  String    @map("assignee_uid")
  state        Int       @default(0)
  assignedUTC  DateTime? @map("assigned_utc")
  completedUTC DateTime? @map("completed_utc")
  dueUTC       DateTime? @map("due_utc")
  rewarded     Int?      @default(0)
  reason       Int?      @default(0)
  result       String?   @default("7") // Default is No result

  @@map("tasks")
}

model Proposed {
  uid          String   @id @unique
  role         String // "2": Validator, "3": Auditor
  personUid    String   @map("person_uid")
  communityUid String   @map("community_uid")
  createdUTC   DateTime @default(now()) @map("created_utc")

  @@map("proposeds")
}

//
// This is a batch of Signed data send to be processed by the sequencer
// We can have different batch types: NONE, VOTES, ...
//
model Batch {
  uid             String    @id @unique // an unique Uid for this batch
  sequence        Int       @default(autoincrement()) // order in which batch was received, used by Sequencer
  type            String    @default("NONE") // type of the Batch: "NONE", "VOTES", etc ...
  metadata        String    @default("{}") // JSON string of this batch metadata 
  signerAccountId String    @map("signer_account_id") // the signer Public key who submitted this batch
  signedData      String    @default("") @map("signed_data") // JSON string of received signed data
  signatureField  String    @default("") @map("signed_signature") // Signature 
  signatureScalar String    @default("") @map("signed_scalar")
  commitment      String    @default("") // the commited Root of the batch MerkleTree (after being processed)
  size            Int       @default(0) // Total number of votes received in this batch
  state           Int       @default(9) // Processing state of the Batch 9: "WAITING", 10: "DONE", 11: "IGNORED" 19: "REJECTED"
  submitedUTC     DateTime  @default(now()) @map("submited_utc") // the submitted time
  doneUTC         DateTime? @map("done_utc") // the final processed time

  // Mina transactions info 
  BatchesAccountId      String? @default("") @map("batches_account_id") // The BatchesContract account id
  BatchReceivedTxnUid   String? @default("") @map("batch_received_txn_uid") // the batch submited transaction, as stored in TransactionQueues 
  BatchesCommitedTxnUid String? @default("") @map("batches_commited_txn_uid") // the merge transsaction, as stored in TransactionQueues 

  @@map("batches")
}

model State {
  id    Int    @id @unique
  label String @default("")

  @@map("states")
}

model TransactionQueue {
  // The transactions queue 
  uid         String    @id @unique // an unique Uid for this Tx
  sequence    Int       @default(autoincrement()) // order in which Tx was received, used by Sequencer
  queue       String    @default("") // name of the Tx queue, example: BATCH, PublicKey of , etc ... 
  type        String    @default("") // type VOTES_BATCH, ACCOUNT_CREATION, VOTE_ACTION
  data        String    @default("{}") // JSON string of this transaction data
  state       Int       @default(9) // Processing state of the Tx 9: "WAITING", 10: "DONE", 11: "IGNORED" 13: "FAILED"
  receivedUTC DateTime  @default(now()) @map("received_utc") // the time it was received
  submitedUTC DateTime? @map("submited_utc") // the submited to MINA time
  retriedUTC  DateTime? @map("retried_utc") // timestamp for the retry request
  doneUTC     DateTime? @map("done_utc") // the final "done with it" time (either on DONE, FAILED or IGNORED)
  retries     Int       @default(0) // Number of retries of this transaction before declaring Failure

  // MINA transaction info, either final success status or errors 
  // as returned by the Graphql endpoint used to check it
  hash  String @default("") @map("txn_hash") // 
  done  String @default("") @map("txn_done") // 
  error String @default("") @map("txn_error") // 

  @@map("transaction_queues")
}

model TransactionEvent {
  // These are events dispatched by the Sequencer when a Transaction has been 
  // fully successfull to inform others. The form of an event is:
  // {type, to, payload}
  sequence   Int       @id @unique @default(autoincrement()) // order in which it was received
  type       String    @default("") // type of the message, example; 'update_claim_account_id'
  subject    String    @default("") // the target of the message, or '*' if everyone
  payload    String    @default("{}") // JSON string with the event payload
  state      Int?      @default(9) // WAITING
  emittedUTC DateTime? @default(now()) @map("emitted_utc") // the emitted time

  @@map("transaction_events")
}
